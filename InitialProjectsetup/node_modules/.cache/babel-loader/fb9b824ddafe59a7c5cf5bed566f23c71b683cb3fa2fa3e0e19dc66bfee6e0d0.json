{"ast":null,"code":"const clientId = 'ed3ad78238e74a08a597d93c074d69dd';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\n//let tokenExpirationTime;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // Check if token and expiration are in the URL\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      tokenExpirationTime = Date.now() + expiresIn * 1000;\n\n      // Set a timer to clear the token after expiration\n      window.setTimeout(() => {\n        accessToken = '';\n        tokenExpirationTime = null;\n      }, expiresIn * 1000);\n\n      // Clean up the URL (removes access_token & expires_in from the address bar)\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      // If no token, redirect user to Spotify login\n      const scope = 'playlist-modify-public playlist-modify-private';\n      const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=${encodeURIComponent(scope)}&redirect_uri=${encodeURIComponent(redirectUri)}`;\n      window.location = authUrl;\n    }\n  },\n  search(term) {\n    const accessToken = this.getAccessToken();\n    const endpoint = `https://api.spotify.com/v1/search?type=track&q=${encodeURIComponent(term)}`;\n    return fetch(endpoint, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      if (!response.ok) throw new Error('Spotify search failed');\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) return [];\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  }\n};\nexport default Spotify;\n\n/*  Optional: check if token is expired\n  isTokenExpired() {\n    return !accessToken || Date.now() > tokenExpirationTime;\n  } */","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","tokenExpirationTime","Date","now","setTimeout","history","pushState","scope","authUrl","encodeURIComponent","search","term","endpoint","fetch","headers","Authorization","then","response","ok","Error","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri"],"sources":["/Users/admin/Desktop/Olya/FrontEnd/jammming/src/components/Spotify.js"],"sourcesContent":["const clientId = 'ed3ad78238e74a08a597d93c074d69dd'; \nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\n//let tokenExpirationTime;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // Check if token and expiration are in the URL\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      tokenExpirationTime = Date.now() + expiresIn * 1000;\n\n      // Set a timer to clear the token after expiration\n      window.setTimeout(() => {\n        accessToken = '';\n        tokenExpirationTime = null;\n      }, expiresIn * 1000);\n\n      // Clean up the URL (removes access_token & expires_in from the address bar)\n      window.history.pushState('Access Token', null, '/');\n\n      return accessToken;\n    } else {\n      // If no token, redirect user to Spotify login\n      const scope = 'playlist-modify-public playlist-modify-private';\n      const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=${encodeURIComponent(\n        scope\n      )}&redirect_uri=${encodeURIComponent(redirectUri)}`;\n\n      window.location = authUrl;\n    }\n  },\n  search(term) {\n    const accessToken = this.getAccessToken();\n    const endpoint = `https://api.spotify.com/v1/search?type=track&q=${encodeURIComponent(term)}`;\n\n    return fetch(endpoint, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    })\n      .then(response => {\n        if (!response.ok) throw new Error('Spotify search failed');\n        return response.json();\n      })\n      .then(jsonResponse => {\n        if (!jsonResponse.tracks) return [];\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      });\n  }\n\n};\n\nexport default Spotify;\n\n/*  Optional: check if token is expired\n  isTokenExpired() {\n    return !accessToken || Date.now() > tokenExpirationTime;\n  } */"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAkC;AACnD,MAAMC,WAAW,GAAG,wBAAwB;AAC5C,IAAIC,WAAW;AACf;;AAEA,MAAMC,OAAO,GAAG;EACdC,cAAcA,CAAA,EAAG;IACf,IAAIF,WAAW,EAAE;MACf,OAAOA,WAAW;IACpB;;IAEA;IACA,MAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,sBAAsB,CAAC;IAC3E,MAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC;IAEvE,IAAIJ,gBAAgB,IAAIK,cAAc,EAAE;MACtCR,WAAW,GAAGG,gBAAgB,CAAC,CAAC,CAAC;MACjC,MAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAC,CAAC,CAAC;MAC3CG,mBAAmB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGJ,SAAS,GAAG,IAAI;;MAEnD;MACAL,MAAM,CAACU,UAAU,CAAC,MAAM;QACtBd,WAAW,GAAG,EAAE;QAChBW,mBAAmB,GAAG,IAAI;MAC5B,CAAC,EAAEF,SAAS,GAAG,IAAI,CAAC;;MAEpB;MACAL,MAAM,CAACW,OAAO,CAACC,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,GAAG,CAAC;MAEnD,OAAOhB,WAAW;IACpB,CAAC,MAAM;MACL;MACA,MAAMiB,KAAK,GAAG,gDAAgD;MAC9D,MAAMC,OAAO,GAAG,oDAAoDpB,QAAQ,8BAA8BqB,kBAAkB,CAC1HF,KACF,CAAC,iBAAiBE,kBAAkB,CAACpB,WAAW,CAAC,EAAE;MAEnDK,MAAM,CAACC,QAAQ,GAAGa,OAAO;IAC3B;EACF,CAAC;EACDE,MAAMA,CAACC,IAAI,EAAE;IACX,MAAMrB,WAAW,GAAG,IAAI,CAACE,cAAc,CAAC,CAAC;IACzC,MAAMoB,QAAQ,GAAG,kDAAkDH,kBAAkB,CAACE,IAAI,CAAC,EAAE;IAE7F,OAAOE,KAAK,CAACD,QAAQ,EAAE;MACrBE,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUzB,WAAW;MACtC;IACF,CAAC,CAAC,CACC0B,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1D,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACK,YAAY,IAAI;MACpB,IAAI,CAACA,YAAY,CAACC,MAAM,EAAE,OAAO,EAAE;MACnC,OAAOD,YAAY,CAACC,MAAM,CAACC,KAAK,CAACC,GAAG,CAACC,KAAK,KAAK;QAC7CC,EAAE,EAAED,KAAK,CAACC,EAAE;QACZC,IAAI,EAAEF,KAAK,CAACE,IAAI;QAChBC,MAAM,EAAEH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI;QAC7BG,KAAK,EAAEL,KAAK,CAACK,KAAK,CAACH,IAAI;QACvBI,GAAG,EAAEN,KAAK,CAACM;MACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;EACN;AAEF,CAAC;AAED,eAAexC,OAAO;;AAEtB;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}